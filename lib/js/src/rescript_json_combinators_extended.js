// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Json$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json.js");
var Json_Decode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Decode.js");

function at(key_path, decoder) {
  if (key_path) {
    var rest = key_path.tl;
    var key = key_path.hd;
    if (rest) {
      return Json_Decode$JsonCombinators.field(key, at(rest, decoder));
    } else {
      return Json_Decode$JsonCombinators.field(key, decoder);
    }
  }
  throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "Expected key_path to contain at least one element",
        Error: new Error()
      };
}

function decodeString(decoder, string) {
  try {
    var value = JSON.parse(string);
    return Json_Decode$JsonCombinators.decode(value, decoder);
  }
  catch (exn){
    return {
            TAG: /* Error */1,
            _0: "Invalid JSON string"
          };
  }
}

function succeed(v) {
  return Json_Decode$JsonCombinators.custom(function (_value) {
              return v;
            });
}

function decodeEvent(decoder, value) {
  return Json$JsonCombinators.decode(value, decoder);
}

exports.at = at;
exports.decodeString = decodeString;
exports.succeed = succeed;
exports.decodeEvent = decodeEvent;
/* No side effect */
