// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vdom = require("./vdom.js");
var Curry = require("rescript/lib/js/curry.js");
var Tea_sub = require("./tea_sub.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Json$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json.js");
var Json_Decode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Decode.js");

var position = Json_Decode$JsonCombinators.object(function (field) {
      return {
              x: field.required("pageX", Json_Decode$JsonCombinators.$$int),
              y: field.required("pageY", Json_Decode$JsonCombinators.$$int)
            };
    });

function registerGlobal(name, key, tagger) {
  var enableCall = function (callbacks_base) {
    var callbacks = {
      contents: callbacks_base
    };
    var fn = function (ev) {
      var pos = Json$JsonCombinators.decode(ev, position);
      if (pos.TAG === /* Ok */0) {
        return Caml_option.some(Curry._1(tagger, pos._0));
      }
      
    };
    var handler = {
      TAG: /* EventHandlerCallback */0,
      _0: key,
      _1: fn
    };
    var elem = document;
    var cache = Vdom.eventHandlerRegister(callbacks, elem, name, handler);
    return function (param) {
      Vdom.eventHandlerUnregister(elem, name, cache);
      
    };
  };
  return Tea_sub.registration(key, enableCall);
}

function clicks(keyOpt, tagger) {
  var key = keyOpt !== undefined ? keyOpt : "";
  return registerGlobal("click", key, tagger);
}

function moves(keyOpt, tagger) {
  var key = keyOpt !== undefined ? keyOpt : "";
  return registerGlobal("mousemove", key, tagger);
}

function downs(keyOpt, tagger) {
  var key = keyOpt !== undefined ? keyOpt : "";
  return registerGlobal("mousedown", key, tagger);
}

function ups(keyOpt, tagger) {
  var key = keyOpt !== undefined ? keyOpt : "";
  return registerGlobal("mouseup", key, tagger);
}

exports.position = position;
exports.registerGlobal = registerGlobal;
exports.clicks = clicks;
exports.moves = moves;
exports.downs = downs;
exports.ups = ups;
/* position Not a pure module */
